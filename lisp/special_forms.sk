using script reflection
using for loops

function call_special_form(name: string, items: objects, env: struct) :: objects:
	set {_fn} to function "special_form_%{_name}%" from script "lisp/special_forms"
	if {_fn} is not set:
		throw runtime warning "Unknown special_form %{_name}%"
	set {_results::*} to results of {_fn} with arguments {_name}, [{_items::*}], {_env}
	if {_results::*} is set:
		return {_results::*}

function special_form_define(name: string, items: object, env: struct) :: object:
	set {_symbol_expr} to {_items}[1]
	if {_symbol_expr}->type != {SExpressionType}->SYMBOL:
		throw runtime warning "define: expected symbol"
	set {_symbol} to 1st element of {_symbol_expr}->value
	set {_value::*} to eval({_items}[2], {_env})
	# sm_log("Define [1]", "%{_value::*}%")
	{_env}->variables.put({_symbol}, {_value::1})
	return {_value::1}

function special_form_lambda(name: string, items: object, env: struct) :: struct:
	for {_item} in {_items}[1]->value:
		set {_params::*} to {_params::*}, {_item}->value
	set {_body} to {_items}[2]
	set {_base} to new_env({_env}, "lambda_base")
	return Function({_params::*}, {_body}, {_base}, "lambda")

function special_form_if(name: string, items: object, env: struct) :: objects:
	if eval({_items}[1], {_env}) = true:
		return eval({_items}[2], {_env})
	return eval({_items}[3], {_env})

function special_form_and(name: string, items: object, env: struct) :: boolean:
	loop range(1, size of ...[{_items}] - 1):
		set {_result} to 1st element of eval({_items}[loop-value], {_env})
		return false if {_result} != true
	return true

function special_form_or(name: string, items: object, env: struct) :: boolean:
	loop range(1, size of ...[{_items}] - 1):
		set {_result} to 1st element of eval({_items}[loop-value], {_env})
		return true if {_result} = true
	return false

function special_form_not(name: string, items: object, env: struct) :: boolean:
	set {_result} to 1st element of eval({_items}[1], {_env})
	if {_result} = true:
		return false
	return true