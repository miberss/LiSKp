import:
	java.util.HashMap
	java.util.HashSet

using for loops
using script reflection

on script load:
	set {-allowed_symbols} to new HashSet()
	for {_c} in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-*/=<>!?_:" split at "":
		{-allowed_symbols}.add({_c})

	set {-handlers} to new HashMap()
	{-handlers}.put("(", fn("read_lparen"))
	{-handlers}.put(")", fn("read_rparen"))
	{-handlers}.put("""", fn("read_string"))
	for {_c} in ("0123456789" split at ""):
		{-handlers}.put({_c}, fn("read_number"))
	for {_c} in ...{-allowed_symbols}:
		{-handlers}.put({_c}, fn("read_symbol"))

###
function lex(inputs: strings):
	for {_input} in {_inputs::*}:
		set {_lexer} to new_lexer({_input})
		set {_token} to next_token({_lexer})
		while {_token}->type != {TokenType}->EOF:
			sm_log("[1]  |  {2}", ({_token}->type, {_token}->text))
			set {_token} to next_token({_lexer})
		sm_log("[1]  |  {2}", ({_token}->type, {_token}->text))
###

function new_lexer(input: string) :: struct:
	return LexerState({_input}, 0, length of {_input} + 1)

function next_token(lexer: struct) :: struct:
	skip_whitespace({_lexer})

	if {_lexer}->pos >= {_lexer}->length:
		return Token({TokenType}->EOF, "EOF")

	set {_c} to peek({_lexer})
	if {-handlers}.containsKey({_c}):
		return result of {-handlers}.get({_c}) with args ({_lexer})

	advance({_lexer})
	return next_token({_lexer})

function skip_whitespace(lexer: struct):
	while {_lexer}->pos < {_lexer}->length:
		exit loop if peek({_lexer}) is not " "
		advance({_lexer})

function is_digit(c: string) :: boolean:
	return whether "%{_c} parsed as number%" = {_c}

function is_symbol(c: string) :: boolean:
	return {-allowed_symbols}.contains({_c})

function read_while(lexer: struct, condition: function, token_type: object) :: struct:
	set {_start} to {_lexer}->pos
	while {_lexer}->pos < {_lexer}->length:
		exit loop if result of ({_condition}) with args (peek({_lexer})) = false
		advance({_lexer})
	return Token({_token_type}, sub({_lexer}->input, {_start}, {_lexer}->pos - 1))

function read_lparen(lexer: struct) :: struct:
	advance({_lexer})
	return Token({TokenType}->LPAREN, "(")

function read_rparen(lexer: struct) :: struct:
	advance({_lexer})
	return Token({TokenType}->RPAREN, ")")

function read_number(lexer: struct) :: struct:
    return read_while({_lexer}, fn("is_digit"), {TokenType}->INT)

function read_symbol(lexer: struct) :: struct:
    return read_while({_lexer}, fn("is_symbol"), {TokenType}->SYMBOL)

function read_string(lexer: struct) :: struct:
	advance({_lexer})
	set {_start} to {_lexer}->pos
	while {_lexer}->pos < {_lexer}->length:
		exit loop if peek({_lexer}) = """"
		advance({_lexer})
	advance({_lexer})
	return Token({TokenType}->STRING, sub({_lexer}->input, {_start}, {_lexer}->pos - 2))

function peek(lexer: struct) :: string:
	return character at {_lexer}->pos in {_lexer}->input

function sub(string: string, start: integer = 1, end: integer = {_}) :: string:
	return subtext of {_string} from index {_start} to index ({_end} ? length of {_string})

function advance(lexer: struct):
	set {_lexer}->pos to {_lexer}->pos + 1